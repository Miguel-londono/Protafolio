---
import "../styles/global.css";
import SideBar from "../components/SideBar.astro";
import Header from "../components/Header.astro";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Protafolio | Miguel Londoño</title>
  </head>
  <body class="bg-gray-100 dark:bg-gray-900">
    <Header />
    <SideBar />
    <main
      class="sm:ml-64 bg-gray-100 text-black dark:bg-gray-900 dark:text-slate-50"
    >
      <slot />
    </main>
  </body>
</html>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("themeToggle") as HTMLElement;
    const html = document.documentElement; // Cambiar a html

    // Cargar el tema inicial
    if (
      localStorage.theme === "dark" ||
      (!("theme" in localStorage) &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      html.classList.add("dark"); // Agregar clase al html
    } else {
      html.classList.remove("dark"); // Quitar clase del html
    }

    // Cambiar el tema al hacer clic
    themeToggle.addEventListener("click", () => {
      const isDarkMode = html.classList.toggle("dark"); // Cambiar clase en html
      localStorage.theme = isDarkMode ? "dark" : "light";
    });

    const observerOptions = { threshold: 0.1 };
    let observer: any;

    // Función para inicializar IntersectionObserver
    function initObserver() {
      const sections = document.querySelectorAll("section");

      // Desconectar el observer anterior si existe
      if (observer) observer.disconnect();

      observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("show");
          } else {
            entry.target.classList.remove("show");
          }
        });
      }, observerOptions);

      // Observar todas las secciones
      sections.forEach((section) => {
        section.classList.add("fade-in");
        observer.observe(section);
      });
    }

    // Función para hacer scroll ajustando el navbar
    function scrollToSection(section: any) {
      if (!section) return;

      const navbar = document.querySelector("header");
      const navbarHeight = navbar ? navbar.offsetHeight : 0;
      const offset = section.offsetTop - navbarHeight;

      window.scrollTo({ top: offset, behavior: "smooth" });
    }

    // Manejar la navegación o el scroll
    function navigateOrScroll(targetSectionId: any, targetPage: any) {
      const section = document.getElementById(targetSectionId);

      if (section) {
        scrollToSection(section);
      } else {
        // Redirigir y esperar a que cargue la nueva página
        window.location.href = `${targetPage}#${targetSectionId}`;
      }
    }

    // Configurar botones después de renderizar
    function setupButtons() {
      const btnInicio = document.getElementById("btnInicio");
      const btnExperience = document.getElementById("btnExperience");
      const btnTechnologies = document.getElementById("btnAbout");
      const btnCertificates = document.getElementById("btnCertificates");

      // Verificar y asignar eventos
      if (btnInicio) {
        btnInicio.addEventListener("click", () =>
          navigateOrScroll("hero", "/")
        );
      }
      if (btnExperience) {
        btnExperience.addEventListener("click", () =>
          navigateOrScroll("experience", "/")
        );
      }
      if (btnTechnologies) {
        btnTechnologies.addEventListener("click", () =>
          navigateOrScroll("about", "/")
        );
      }
      if (btnCertificates) {
        btnCertificates.addEventListener("click", () =>
          navigateOrScroll("certificates", "/")
        );
      }
    }

    // Manejar scroll al cargar la página con hash
    function handleScrollOnLoad() {
      const hash = window.location.hash;
      if (hash) {
        setTimeout(() => {
          const section = document.querySelector(hash);
          if (section) scrollToSection(section);
        }, 100);
      }
    }

    // Inicialización
    initObserver();
    setupButtons();
    handleScrollOnLoad();

    // Reconectar todo después de un swap de Astro
    document.addEventListener("astro:after-swap", () => {
      initObserver();
      setupButtons();
      handleScrollOnLoad();
    });
  });
</script>
